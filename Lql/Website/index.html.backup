<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lambda Query Language (LQL) - Functional Data Querying</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Dark Theme Colors */
            --volcanic: #FF4500;
            --forest: #228B22;
            --obsidian: #1C1C1C;
            --amber: #FFA500;
            --violet: #8A2BE2;
            --charcoal: #36454F;
            --ivory: #FFFFF0;
            --dark-bg: #0F0F0F;
            --darker-bg: #0A0A0A;
            --card-bg: #1A1A1A;
            --border: #2A2A2A;
            --text-primary: #FFFFF0;
            --text-secondary: #B0B0B0;
            --text-muted: #808080;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 24px;
        }

        /* Header */
        header {
            background: var(--darker-bg);
            border-bottom: 1px solid var(--border);
            padding: 16px 0;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo img {
            width: 40px;
            height: 40px;
        }

        .logo-text {
            font-size: 24px;
            font-weight: 800;
            color: var(--amber);
        }

        nav ul {
            display: flex;
            list-style: none;
            gap: 32px;
        }

        nav a {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s;
        }

        nav a:hover {
            color: var(--volcanic);
        }

        /* Hero Section */
        .hero {
            padding: 120px 0;
            background: linear-gradient(135deg, var(--darker-bg) 0%, var(--obsidian) 100%);
            position: relative;
            overflow: hidden;
        }

        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 20%, rgba(255, 69, 0, 0.1) 0%, transparent 50%),
                        radial-gradient(circle at 70% 80%, rgba(34, 139, 34, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }

        .hero-content {
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .hero h1 {
            font-size: 64px;
            font-weight: 800;
            margin-bottom: 24px;
            background: linear-gradient(135deg, var(--volcanic) 0%, var(--amber) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .hero .subtitle {
            font-size: 24px;
            color: var(--text-secondary);
            margin-bottom: 48px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .cta-buttons {
            display: flex;
            gap: 24px;
            justify-content: center;
            margin-bottom: 80px;
        }

        .btn {
            padding: 16px 32px;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--volcanic) 0%, var(--amber) 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px rgba(255, 69, 0, 0.4);
        }

        .btn-secondary {
            background: transparent;
            color: var(--forest);
            border: 2px solid var(--forest);
        }

        .btn-secondary:hover {
            background: var(--forest);
            color: white;
        }

        /* Code Example */
        .hero-code {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 32px;
            max-width: 800px;
            margin: 0 auto;
            position: relative;
        }

        .code-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 24px;
        }

        .code-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .code-dot:nth-child(1) { background: #FF5F57; }
        .code-dot:nth-child(2) { background: #FFBD2E; }
        .code-dot:nth-child(3) { background: #28CA42; }

        .code-title {
            margin-left: 16px;
            color: var(--text-muted);
            font-size: 14px;
        }

        .code-block {
            font-family: 'JetBrains Mono', monospace;
            font-size: 16px;
            line-height: 1.8;
            color: var(--text-primary);
        }

        .keyword { color: var(--volcanic); }
        .operator { color: var(--forest); }
        .function { color: var(--amber); }
        .string { color: var(--violet); }
        .comment { color: var(--text-muted); }
        .identifier { color: var(--text-primary); }

        /* Features Section */
        .features {
            padding: 120px 0;
            background: var(--obsidian);
        }

        .section-header {
            text-align: center;
            margin-bottom: 80px;
        }

        .section-header h2 {
            font-size: 48px;
            font-weight: 700;
            margin-bottom: 16px;
            color: var(--text-primary);
        }

        .section-header p {
            font-size: 20px;
            color: var(--text-secondary);
            max-width: 600px;
            margin: 0 auto;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 32px;
        }

        .feature-card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 32px;
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-4px);
            border-color: var(--volcanic);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
        }

        .feature-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--volcanic) 0%, var(--amber) 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 24px;
            font-size: 24px;
        }

        .feature-card h3 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 16px;
            color: var(--text-primary);
        }

        .feature-card p {
            color: var(--text-secondary);
            line-height: 1.6;
        }

        /* Examples Section */
        .examples {
            padding: 120px 0;
            background: var(--dark-bg);
        }

        .examples-grid {
            display: grid;
            gap: 48px;
        }

        .example {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 48px;
            align-items: center;
        }

        .example:nth-child(even) {
            direction: rtl;
        }

        .example:nth-child(even) > * {
            direction: ltr;
        }

        .example-content h3 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 16px;
            color: var(--text-primary);
        }

        .example-content p {
            font-size: 18px;
            color: var(--text-secondary);
            margin-bottom: 24px;
        }

        .example-features {
            list-style: none;
        }

        .example-features li {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
            color: var(--text-secondary);
        }

        .example-features li::before {
            content: 'â†’';
            color: var(--forest);
            font-weight: bold;
        }

        .example-code {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 24px;
        }

        /* Footer */
        footer {
            background: var(--darker-bg);
            border-top: 1px solid var(--border);
            padding: 48px 0;
            text-align: center;
        }

        .footer-content {
            color: var(--text-muted);
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 32px;
            margin-bottom: 24px;
        }

        .footer-links a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: color 0.2s;
        }

        .footer-links a:hover {
            color: var(--volcanic);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 48px;
            }

            .hero .subtitle {
                font-size: 20px;
            }

            .cta-buttons {
                flex-direction: column;
                align-items: center;
            }

            .example {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .example:nth-child(even) {
                direction: ltr;
            }

            nav ul {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <img src="lql-icon.png" alt="LQL Logo">
                    <span class="logo-text">LQL</span>
                </div>
                <nav>
                    <ul>
                        <li><a href="#features">Features</a></li>
                        <li><a href="#examples">Examples</a></li>
                        <li><a href="#docs">Documentation</a></li>
                        <li><a href="#github">GitHub</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <section class="hero">
        <div class="container">
            <div class="hero-content">
                <h1>Lambda Query Language</h1>
                <p class="subtitle">Functional programming meets data querying. Write elegant, composable queries with the power of lambda expressions and pipeline operators.</p>
                
                <div class="cta-buttons">
                    <a href="#examples" class="btn btn-primary">See Examples</a>
                    <a href="#docs" class="btn btn-secondary">Documentation</a>
                </div>

                <div class="hero-code">
                    <div class="code-header">
                        <div class="code-dot"></div>
                        <div class="code-dot"></div>
                        <div class="code-dot"></div>
                        <span class="code-title">complex_analytics.lql</span>
                    </div>
                    <div class="code-block">
<span class="comment">-- Join users + orders, filter only completed orders</span>
<span class="keyword">let</span> <span class="identifier">joined</span> <span class="operator">=</span>
    <span class="identifier">users</span>
    <span class="operator">|></span> <span class="function">join</span>(<span class="identifier">orders</span>, <span class="identifier">on</span> <span class="operator">=</span> <span class="identifier">users</span>.<span class="identifier">id</span> <span class="operator">=</span> <span class="identifier">orders</span>.<span class="identifier">user_id</span>)
    <span class="operator">|></span> <span class="function">filter</span>(<span class="keyword">fn</span>(<span class="identifier">row</span>) <span class="operator">=></span> <span class="identifier">row</span>.<span class="identifier">orders</span>.<span class="identifier">status</span> <span class="operator">=</span> <span class="string">'completed'</span>)

<span class="comment">-- Aggregate and analyze</span>
<span class="identifier">joined</span>
<span class="operator">|></span> <span class="function">group_by</span>(<span class="identifier">users</span>.<span class="identifier">id</span>)
<span class="operator">|></span> <span class="function">select</span>(
    <span class="identifier">users</span>.<span class="identifier">name</span>,
    <span class="function">count</span>(*) <span class="keyword">as</span> <span class="identifier">total_orders</span>,
    <span class="function">sum</span>(<span class="identifier">orders</span>.<span class="identifier">total</span>) <span class="keyword">as</span> <span class="identifier">revenue</span>
)
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="features" class="features">
        <div class="container">
            <div class="section-header">
                <h2>Why LQL?</h2>
                <p>Functional programming principles applied to data querying for cleaner, more maintainable code.</p>
            </div>
            
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">Î»</div>
                    <h3>Functional First</h3>
                    <p>Built on pure functional programming principles. Immutable data transformations, lambda expressions, and composable operations make your queries predictable and testable.</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">|></div>
                    <h3>Pipeline Operators</h3>
                    <p>Chain operations naturally with pipeline operators. Data flows from left to right, making complex transformations easy to read and understand.</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">âš¡</div>
                    <h3>Type Safe</h3>
                    <p>Strong typing ensures your queries are correct at compile time. No more runtime surprises from typos or schema mismatches.</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">ðŸ”§</div>
                    <h3>Composable</h3>
                    <p>Build complex queries from simple, reusable components. Define once, use everywhere with let bindings and function composition.</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">ðŸ“Š</div>
                    <h3>SQL Compatible</h3>
                    <p>Compiles to optimized SQL for your target database. Get the performance of SQL with the elegance of functional programming.</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">ðŸŽ¯</div>
                    <h3>Developer Focused</h3>
                    <p>Designed by developers, for developers. Excellent tooling support, clear error messages, and intuitive syntax.</p>
                </div>
            </div>
        </div>
    </section>

    <section id="examples" class="examples">
        <div class="container">
            <div class="section-header">
                <h2>See LQL in Action</h2>
                <p>Real examples showing the power and elegance of functional data querying.</p>
            </div>
            
            <div class="examples-grid">
                <div class="example">
                    <div class="example-content">
                        <h3>Simple Selection</h3>
                        <p>Clean, readable syntax for basic data selection. No verbose SELECT statements or complex syntax.</p>
                        <ul class="example-features">
                            <li>Pipeline operator for natural flow</li>
                            <li>Clear column specification</li>
                            <li>Type-safe field access</li>
                        </ul>
                    </div>
                    <div class="example-code">
                        <div class="code-block">
<span class="identifier">users</span> <span class="operator">|></span> <span class="function">select</span>(
    <span class="identifier">users</span>.<span class="identifier">id</span>, 
    <span class="identifier">users</span>.<span class="identifier">name</span>, 
    <span class="identifier">users</span>.<span class="identifier">email</span>
)
                        </div>
                    </div>
                </div>

                <div class="example">
                    <div class="example-content">
                        <h3>Advanced Filtering</h3>
                        <p>Lambda expressions provide powerful, type-safe filtering with full access to row data.</p>
                        <ul class="example-features">
                            <li>Lambda function syntax</li>
                            <li>Logical operators (and, or)</li>
                            <li>Range filtering</li>
                        </ul>
                    </div>
                    <div class="example-code">
                        <div class="code-block">
<span class="identifier">employees</span>
<span class="operator">|></span> <span class="function">select</span>(
    <span class="identifier">employees</span>.<span class="identifier">id</span>, 
    <span class="identifier">employees</span>.<span class="identifier">name</span>, 
    <span class="identifier">employees</span>.<span class="identifier">salary</span>
)
<span class="operator">|></span> <span class="function">filter</span>(<span class="keyword">fn</span>(<span class="identifier">row</span>) <span class="operator">=></span> 
    <span class="identifier">row</span>.<span class="identifier">employees</span>.<span class="identifier">salary</span> <span class="operator">></span> <span class="string">50000</span> <span class="keyword">and</span> 
    <span class="identifier">row</span>.<span class="identifier">employees</span>.<span class="identifier">salary</span> <span class="operator"><</span> <span class="string">100000</span>
)
                        </div>
                    </div>
                </div>

                <div class="example">
                    <div class="example-content">
                        <h3>Arithmetic & Functions</h3>
                        <p>Rich expression support with mathematical operations and built-in functions for complex calculations.</p>
                        <ul class="example-features">
                            <li>Mathematical expressions</li>
                            <li>Column aliases with 'as'</li>
                            <li>Function composition</li>
                        </ul>
                    </div>
                    <div class="example-code">
                        <div class="code-block">
<span class="identifier">products</span> 
<span class="operator">|></span> <span class="function">select</span>(
    <span class="identifier">products</span>.<span class="identifier">name</span>,
    <span class="identifier">products</span>.<span class="identifier">price</span> <span class="operator">*</span> <span class="identifier">products</span>.<span class="identifier">quantity</span> <span class="keyword">as</span> <span class="identifier">total_value</span>,
    <span class="identifier">products</span>.<span class="identifier">price</span> <span class="operator">+</span> <span class="string">10</span> <span class="keyword">as</span> <span class="identifier">price_plus_ten</span>,
    <span class="function">round</span>(<span class="identifier">products</span>.<span class="identifier">price</span> <span class="operator">/</span> <span class="string">2</span>, <span class="string">2</span>) <span class="keyword">as</span> <span class="identifier">half_price</span>
)
<span class="operator">|></span> <span class="function">filter</span>(<span class="keyword">fn</span>(<span class="identifier">row</span>) <span class="operator">=></span> 
    <span class="identifier">row</span>.<span class="identifier">products</span>.<span class="identifier">price</span> <span class="operator">></span> <span class="string">0</span>
)
                        </div>
                    </div>
                </div>

                <div class="example">
                    <div class="example-content">
                        <h3>Aggregation & Grouping</h3>
                        <p>Powerful aggregation functions with group by operations and having clauses for complex analytics.</p>
                        <ul class="example-features">
                            <li>Group by multiple columns</li>
                            <li>Aggregate functions (count, sum, avg)</li>
                            <li>Having clause with lambda filters</li>
                        </ul>
                    </div>
                    <div class="example-code">
                        <div class="code-block">
<span class="identifier">orders</span>
<span class="operator">|></span> <span class="function">group_by</span>(<span class="identifier">orders</span>.<span class="identifier">user_id</span>, <span class="identifier">orders</span>.<span class="identifier">status</span>)
<span class="operator">|></span> <span class="function">select</span>(
    <span class="identifier">orders</span>.<span class="identifier">user_id</span>,
    <span class="identifier">orders</span>.<span class="identifier">status</span>,
    <span class="function">count</span>(*) <span class="keyword">as</span> <span class="identifier">order_count</span>,
    <span class="function">sum</span>(<span class="identifier">orders</span>.<span class="identifier">total</span>) <span class="keyword">as</span> <span class="identifier">total_amount</span>,
    <span class="function">avg</span>(<span class="identifier">orders</span>.<span class="identifier">total</span>) <span class="keyword">as</span> <span class="identifier">avg_amount</span>
)
<span class="operator">|></span> <span class="function">having</span>(<span class="keyword">fn</span>(<span class="identifier">group</span>) <span class="operator">=></span> <span class="function">count</span>(*) <span class="operator">></span> <span class="string">2</span>)
<span class="operator">|></span> <span class="function">order_by</span>(<span class="identifier">total_amount</span> <span class="keyword">desc</span>)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-links">
                    <a href="#docs">Documentation</a>
                    <a href="#github">GitHub</a>
                    <a href="#examples">Examples</a>
                    <a href="#community">Community</a>
                </div>
                <p>&copy; 2024 Lambda Query Language. Built with functional programming principles.</p>
            </div>
        </div>
    </footer>
</body>
</html>