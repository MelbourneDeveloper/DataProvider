-- Lambda Query Language Example
-- This file demonstrates LQL syntax and features

-- Simple select with filter
users
|> filter (age > 18 and status = 'active')
|> select name, email, age, created_at
|> order_by created_at desc
|> limit 10

-- Join operation with aggregation
let active_users = users |> filter (status = 'active') in
orders
|> join active_users on orders.user_id = active_users.id
|> group_by active_users.name, active_users.email
|> select 
    active_users.name,
    active_users.email,
    count(*) as total_orders,
    sum(orders.amount) as total_spent,
    avg(orders.amount) as avg_order_value
|> having total_orders > 5
|> order_by total_spent desc

-- Complex query with arithmetic and functions
products
|> select 
    name,
    category,
    price,
    round(price * 0.1, 2) as tax,
    round(price + (price * 0.1), 2) as total_price,
    upper(category) as category_upper,
    length(name) as name_length
|> filter (total_price > 100 and category in ('electronics', 'books'))
|> order_by total_price desc, name asc

-- Union query
let recent_orders = orders |> filter (created_at > '2023-01-01') in
let old_orders = orders |> filter (created_at <= '2023-01-01') in

recent_orders
|> select user_id, amount, 'recent' as order_type
union
old_orders
|> select user_id, amount, 'old' as order_type
|> order_by amount desc

-- Insert statement
insert into users (
    name, 
    email, 
    age, 
    status,
    created_at
) values (
    'John Doe',
    'john.doe@example.com',
    25,
    'active',
    now()
)

-- Update with filter
users
|> filter (last_login < '2023-01-01')
|> update {
    status = 'inactive',
    updated_at = now()
}

-- Lambda function example
let calculate_discount = fn price => 
    case 
        when price > 1000 then price * 0.1
        when price > 500 then price * 0.05
        else 0
    end
in

products
|> select 
    name,
    price,
    calculate_discount(price) as discount,
    price - calculate_discount(price) as final_price
|> filter (discount > 0)

-- Nested query with case expression
employees
|> select 
    name,
    department,
    salary,
    case
        when salary > 100000 then 'Senior'
        when salary > 50000 then 'Mid-level'
        else 'Junior'
    end as level,
    case
        when department = 'Engineering' then salary * 1.1
        when department = 'Sales' then salary * 1.05
        else salary
    end as adjusted_salary
|> group_by department, level
|> select 
    department,
    level,
    count(*) as employee_count,
    avg(adjusted_salary) as avg_salary,
    min(adjusted_salary) as min_salary,
    max(adjusted_salary) as max_salary
|> order_by department, level

-- String manipulation functions
customers
|> select 
    concat(first_name, ' ', last_name) as full_name,
    upper(email) as email_upper,
    substring(phone, 1, 3) as area_code,
    trim(address) as clean_address,
    length(notes) as notes_length
|> filter (notes_length > 0)

-- Date functions
events
|> select 
    title,
    event_date,
    year(event_date) as event_year,
    month(event_date) as event_month,
    day(event_date) as event_day,
    hour(event_date) as event_hour
|> filter (event_year = 2023 and event_month >= 6)
|> order_by event_date

-- Mathematical functions
measurements
|> select 
    sample_id,
    value,
    abs(value) as absolute_value,
    round(value, 2) as rounded_value,
    floor(value) as floor_value,
    ceil(value) as ceiling_value,
    sqrt(abs(value)) as square_root
|> filter (abs(value) > 10)

-- Conditional functions
user_profiles
|> select 
    user_id,
    coalesce(nickname, username, 'Anonymous') as display_name,
    nullif(bio, '') as clean_bio,
    case when avatar_url is null then false else true end as has_avatar
|> filter (clean_bio is not null)